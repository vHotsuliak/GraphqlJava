schema {
  query: Query
  mutation: Mutation
}

type Query {
  allLinks(filter: LinkFilter): [Link]
  allUsers: [User]
}

input LinkFilter {
  description_contains: String
  url_contains: String
}

type Link {
    id: ID!
    url: String!
    description: String
    postedBy: User
}

type Mutation {
    createUser(name: String!, authProvider: AuthData!): User
    createLink(url: String!, description: String!): Link
    signinUser(auth: AuthData): SigninPayload
    createVote(linkId: ID, userId: ID): Vote
}

type Vote {
    id: ID!
    createdAt: DateTime!
    user: User!
    link: Link!
}

scalar DateTime

type SigninPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String
  password: String
}

input AuthData {
  email: String!
  password: String!
}